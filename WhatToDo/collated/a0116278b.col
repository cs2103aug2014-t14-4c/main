//@author: a0116278b



	/**
	 * origin: ./\StorageConverter.cpp
	 */

#include "StorageConverter.h"

StorageConverter::StorageConverter(void){
	_taskDatetimeString = ""; 
	_taskName = "";
	_taskTags = "";
	_taskIsDone = ""; 
	_logFileName = LOG_FILE_NAME; 
}

//will convert individual task attributes to strings
//note: order of conversion important for the developer, not for the user
//clear initial content
vector<string> StorageConverter::convertTaskToString(Task taskToConvert){

	_taskStringAttributes.clear(); 

	//string parameters after conversion
	string taskStartDatetime = convertTaskPtimeToString(taskToConvert.getTaskStartTime());
	string taskEndDatetime = convertTaskPtimeToString(taskToConvert.getTaskEndTime());
	string taskDeadline = convertTaskPtimeToString(taskToConvert.getTaskDeadline());
	string taskName = convertTaskNameToString(taskToConvert);
	string taskTags = convertTaskTagVectorToString(taskToConvert.getTaskTags());
	string taskIsDone = convertTaskBoolToString(taskToConvert.getTaskIsDone());
	
	//storing each string in a vector
	_taskStringAttributes.push_back(TITLE_TASKSTARTDATETIME + taskStartDatetime);
	_taskStringAttributes.push_back(TITLE_TASKENDDATETIME + taskEndDatetime); 
	_taskStringAttributes.push_back(TITLE_TASKDEADLINE + taskDeadline);
	_taskStringAttributes.push_back(TITLE_TASKNAME + taskName);
	_taskStringAttributes.push_back(TITLE_TASKTAGS + taskTags);
	_taskStringAttributes.push_back(TITLE_TASKISDONE + taskIsDone); 

	//finally write the whole vector of string into file
	return _taskStringAttributes; 
}

//handles the conversion from string to task attributes, function
//is futhered slapped into smaller subfunctions for each string conversion
//extraction of string -> conversion of string ->set Task parameters->
//return Task
Task StorageConverter::convertStringToTask(vector<string> stringToConvert) {
	Task convertedTask; 
	assert(&stringToConvert != NULL);
	vector<string>::iterator taskAttributeIterator = stringToConvert.begin(); 

	try{
		//1. convert startime
		_taskDatetimeString = (*taskAttributeIterator).substr(TITLE_TASKSTARTDATETIME.size());
		convertStringStartDatetimeToTask(convertedTask);
		taskAttributeIterator++; 

		//2. convert endtime
		_taskDatetimeString = (*taskAttributeIterator).substr(TITLE_TASKENDDATETIME.size());
		convertStringEndDatetimeToTask(convertedTask);
		taskAttributeIterator++; 

		//3. convert task deadline
		_taskDatetimeString = (*taskAttributeIterator).substr(TITLE_TASKDEADLINE.size());
		convertStringDeadlineToTask(convertedTask); 
		taskAttributeIterator++; 

		//4. convert task name
		_taskName = (*taskAttributeIterator).substr(TITLE_TASKNAME.size());
		convertedTask.setTaskName(_taskName);
		taskAttributeIterator++; 

		//5. convert task tags 
		_taskTags = (*taskAttributeIterator).substr(TITLE_TASKTAGS.size());
		convertStringTasktagToTask(convertedTask);
		taskAttributeIterator++; 
	
		//6. convert isDone, isDone initialized false, thus only call if it's true
	
		_taskIsDone = (*taskAttributeIterator).substr(TITLE_TASKISDONE.size());
		convertStringIsdoneToTask(convertedTask);

		//return the converted individual task
		return convertedTask;
	} catch(exception&){
		throw;
	}
}

//convert ptime to string
string StorageConverter::convertTaskPtimeToString(ptime myDatetime){
	string convertedPtimeString = to_iso_string(myDatetime); 
	return convertedPtimeString;
}

string StorageConverter::convertTaskPtimeDurationToString(time_duration myDuration){
	string convertedPtimeDuration = to_iso_string(myDuration);
	return convertedPtimeDuration;
}

//convert boolean to string 
string StorageConverter::convertTaskBoolToString(bool boolToConvert){
	stringstream converter; 
	converter << boolToConvert;

	return converter.str();
}

//convert vector<string> of task tags to string
//read through all the vector of strings for task tags 
//concatenate the individual string
//return the whole string
string StorageConverter::convertTaskTagVectorToString(vector<string> taskTags){
	string tagString = "";
	vector<string>::iterator taskTagIterator = taskTags.begin();
	while(taskTagIterator!=taskTags.end()){
		tagString = tagString + *taskTagIterator + " ";
		taskTagIterator++;
	}

	return tagString;
}

//_taskName already in the form of string, function created for
//consistency sake
string StorageConverter::convertTaskNameToString(Task taskToConvert){
	_taskName = taskToConvert.getTaskName();
	return _taskName; 
}


//converts a Datetime string into a ptime object
//function throws exception if conversion is not successful
void StorageConverter::convertStringStartDatetimeToTask(Task& convertedTask){

	try{
		if (_taskDatetimeString == NOT_A_DATETIME){
			convertedTask.setTaskStartTime(not_a_date_time); 
		} else {
			ptime taskStartTime(from_iso_string(_taskDatetimeString));
			convertedTask.setTaskStartTime(taskStartTime);
		}
	}
	catch(exception&){
		compileErrorMessage(STORAGE_FUNCTION_CONVERT_PTIME_START, STORAGE_MSG_PTIME_START_ERROR);
		logErrorMessage(_logErrorMessage);
		throw;
	}
	return; 
}

//similar to convertStringToPtime, introduced for SLAP
void StorageConverter::convertStringEndDatetimeToTask(Task& convertedTask){
	try{
		if (_taskDatetimeString == NOT_A_DATETIME){
			convertedTask.setTaskEndTime(not_a_date_time); 
		} else {
			ptime taskEndTime(from_iso_string(_taskDatetimeString));
			convertedTask.setTaskEndTime(taskEndTime);
		}
	}
	catch(const out_of_range&){
		compileErrorMessage(STORAGE_FUNCTION_CONVERT_PTIME_END,STORAGE_MSG_PTIME_END_ERROR);
		logErrorMessage(_logErrorMessage);
		throw;
	}
	
}

//similar to convertStringToPtime, introduced for SLAP
void StorageConverter::convertStringDeadlineToTask(Task& convertedTask){
	try{
		if (_taskDatetimeString == NOT_A_DATETIME){
			convertedTask.setTaskDeadline(not_a_date_time); 
		} else {
			ptime taskDeadline(from_iso_string(_taskDatetimeString));
			convertedTask.setTaskDeadline(taskDeadline);
		}
		return;
	} catch(...){
		compileErrorMessage(STORAGE_FUNCTION_CONVERT_PTIME_DEADLINE,STORAGE_MSG_PTIME_DEADLINE_ERROR);
		logErrorMessage(_logErrorMessage);
		throw;
	}
	
}

//converts	 a vector<string> of tasktags to Task attribute 
void StorageConverter::convertStringTasktagToTask(Task& convertedTask){

	vector<string> taskTagVector = convertTaskTagStringToVector(_taskTags);
	convertedTask.setTaskTags(taskTagVector);

	return; 
}

//convert string to bool 
void StorageConverter::convertStringIsdoneToTask(Task& convertedTask){

	try{
		if(_taskIsDone==STRING_TRUE){
			convertedTask.setTaskIsDone();
		}else if(_taskIsDone==STRING_FALSE){
			convertedTask.setTaskIsNotDone();
		}else{
			compileErrorMessage(STORAGE_FUNCTION_CONVERT_ISDONE,STORAGE_MSG_ISDONE_ERROR);
			logErrorMessage(_logErrorMessage);
			throw; 
		} 
		return;
	}
	catch(exception&){
		compileErrorMessage(STORAGE_FUNCTION_CONVERT_ISDONE,STORAGE_MSG_ISDONE_ERROR);
		logErrorMessage(_logErrorMessage);
		throw; 
	}
}

//convert taskTagstring to vector<string>
//pass in the string to a iss object
//read individual substr delimited by whitespace
//push into the tagVector
vector<string> StorageConverter::convertTaskTagStringToVector(string tagString){

	assert(&tagString!=NULL);
	istringstream tagStringStream(tagString); 
	string individualTag; 
	vector<string> tagVector;
	
	while(tagStringStream>>individualTag){
		if(individualTag[0] != '#'){
			individualTag = '#' + individualTag;
			tagVector.push_back(individualTag);
		} else{
			tagVector.push_back(individualTag);
		}
	}

	return tagVector;
}

//logging function to write error message to file
void StorageConverter::logErrorMessage(string errorMessage){
	if(LOGGING_MODE_ON == true){
		ofstream writeToLogFile;
		string currentTime = to_simple_string(second_clock::local_time());
		writeToLogFile.open(LOG_FILE_NAME, ios::app);
		writeToLogFile << currentTime << endl << errorMessage << endl;
		writeToLogFile << endl;
		writeToLogFile.close();
	} 
	return;
}

//error messages will be compiled to a standard template before 
//it is to be written to file
void StorageConverter::compileErrorMessage(string errorMessageLocation, string errorMessage){
	
	sprintf_s(_logErrorMessage, STORAGE_LOGGING_TEMPLATE.c_str(), 
		errorMessageLocation.c_str(), errorMessage.c_str());

	return;
}



	// End of segment: ./\StorageConverter.cpp





	/**
	 * origin: ./\StorageConverter.h
	 */

//****************************************************************************
//StorageConverter is the class that is responsible for all the aspects of 
//the conversions when an user wants to save a State to database or load a 
//State from database. The two main conversions involved are...

//1)converting from a Task to string
//2)converting from a string to Task

//for each type of conversion, the process is further breaked down into smaller 
//pieces or called subfunctions to apply the Single Level of Abstraction 
//Principle. After conversion is complete, the relevant info are returned to 
//the other StorageExecutor to either be written to database, or return a State
//If an error occurred at any of the conversion operations, an error message
//will be logged. 

//sample usage:
//string taskString =storageConverterObj.convertTaskToString(Task taskToConvert);
//Task myTask = storageConverterObj.convertStringToTask(vector<string> 
//stringToConvert);
//****************************************************************************
#pragma once

#include <string>
#include <vector>
#include <sstream>
#include "Task.h"
#include <exception>
#include <fstream>

using namespace std;
const int MAX_SIZE = 255;
const string LOG_FILE_NAME = "storageLogs.txt";
const string STRING_TRUE = "1";
const string STRING_FALSE = "0";
const bool LOGGING_MODE_ON = true;

//functions that thrown the messages
const string STORAGE_LOGGING_TEMPLATE = 
	"Function called: %s\nError Message: %s";
const string STORAGE_FUNCTION_CONVERT_PTIME_START = 
	"convertStringStartTimeToTask();";
const string STORAGE_FUNCTION_CONVERT_PTIME_END = 
	"convertStringEndTimeToTask();";
const string STORAGE_FUNCTION_CONVERT_PTIME_DEADLINE = 
	"convertStringDeadLineToTask();";
const string STORAGE_FUNCTION_CONVERT_ISDONE = 
	"ConvertStringIsDoneToTask(Task &convertedTask);";

//error messages
const string STORAGE_MSG_PTIME_START_ERROR = 
	"Start Datetime false format.\n";
const string STORAGE_MSG_PTIME_END_ERROR = 
	"End Datetime false format.\n";
const string STORAGE_MSG_PTIME_DEADLINE_ERROR = 
	"Deadline false format.\n";
const string STORAGE_MSG_ISDONE_ERROR = 
	"Task IsDone false format. \n";

//for documentation and readability
const string TITLE_TASKSTARTDATETIME = "Start Datetime: ";
const string TITLE_TASKENDDATETIME = "End Datetime: ";
const string TITLE_TASKDEADLINE = "Task Deadline: ";
const string TITLE_TASKNAME = "Task Name: ";
const string TITLE_TASKTAGS = "Task Tags: ";
const string TITLE_TASKISDONE = "Task isDone Status: ";
const string NOT_A_DATETIME = "not-a-date-time"; 

class StorageConverter{
	private:
		//attributes for StorageConverter
		vector<string> _taskStringAttributes;
		string _taskDatetimeString; 
		string _taskName;
		string _taskTags;
		string _taskIsDone; 
		string _logFileName;
		char _logErrorMessage[MAX_SIZE]; 

	public:

		StorageConverter(void);

		//primary conversion functions
		vector<string> convertTaskToString(Task taskToConvert);
		Task convertStringToTask(vector<string> stringToConvert);

		//subfunctions for conversion from task to string
		string convertTaskPtimeToString(ptime myDatetime);
		string convertTaskPtimeDurationToString(time_duration myDuration);
		string convertTaskBoolToString(bool boolToConvert);
		string convertTaskTagVectorToString(vector<string> taskTags);
		string convertTaskNameToString(Task taskToConvert);
		
		//subfunctions for conversion from string to task
		void convertStringStartDatetimeToTask(Task& convertedTask);
		void convertStringEndDatetimeToTask(Task& convertedTask);
		void convertStringDeadlineToTask(Task& convertedTask);
		void convertStringTasktagToTask(Task& convertedTask);
		void convertStringIsdoneToTask(Task& convertedTask);
		vector<string> convertTaskTagStringToVector(string tagString);

		//logging function
		void logErrorMessage(string logString);
		void compileErrorMessage(string errorMessageLocation, 
								 string errorMessage);

}; 


	// End of segment: ./\StorageConverter.h





	/**
	 * origin: ./\StorageDatabase.cpp
	 */

#include "StorageDatabase.h"
#include <fstream>
#include <iostream>

using namespace std;

StorageDatabase::StorageDatabase(){
	_fileName = INITIAL_VALUE_FILE_NAME;
	_backUpFileName = INITIAL_VALUE_BACK_UP_FILE_NAME;
	_stringToRead.clear();

}

//1. check no of attributes for each task
//2. ifstream to getline the amount of attributes to store in the vector<string>
//3. push the vector<string> into the vector of vectors
vector<vector<string>> StorageDatabase::readFromDatabase(){

	ifstream readFile(_fileName);
	assert(&readFile!=NULL);
	string myText; 
	readIndividualFileFromDatabase(readFile, myText);
	readFile.close();

	return _stringToRead; 
}

//read from backup database if the database is corrupted 
vector<vector<string>> StorageDatabase::readFromBackUpDatabase(){

	ifstream readFile(_backUpFileName);
	assert(&readFile!=NULL);
	string myText; 
	readIndividualFileFromDatabase(readFile, myText);
	readFile.close();

	return _stringToRead; 
}

//pass in a vector<vector<string>> where each vector<string> is a task in vector<string> 
//form, the strings are then stored into both the database and backup database 
void StorageDatabase::writeToDatabase(vector<vector<string>> taskStringVectorToWrite){
	
	vector<vector<string>>::iterator taskVectorIterator = taskStringVectorToWrite.begin(); 
	assert(&taskVectorIterator != NULL);
	ofstream writeFile;

	writeFile.open(_fileName);
	assert(&writeFile!=NULL);
	writeIndivdualFileToDatabase(taskVectorIterator, writeFile, taskStringVectorToWrite);
	writeFile.close();

	taskVectorIterator = taskStringVectorToWrite.begin(); 
	assert(&writeFile != NULL);
	writeFile.open(_backUpFileName);
	writeIndivdualFileToDatabase(taskVectorIterator, writeFile, taskStringVectorToWrite); 

	writeFile.close(); 
	return;
}

void StorageDatabase::setFileName(string nameToSet){
	_fileName = nameToSet;
}

string StorageDatabase::getFileName(){
	return _fileName; 
}

//writing individual tasks after been converted to be stored into database
void StorageDatabase::writeIndivdualFileToDatabase(vector<vector<string>>::iterator fileIterator, 
													ofstream& writeFile, 
													vector<vector<string>> taskStringToWrite){
	
	fileIterator = taskStringToWrite.begin();
	while(fileIterator != taskStringToWrite.end()){
		for(int i = START; i < NO_OF_ATTRIBUTES; i++){
			writeFile << (*fileIterator)[i] << endl;
		}
		writeFile << endl; 
		fileIterator++;
	}
	return;
}

//database is read and after that the strings will be pushed back to a _stringToLoad
//vector where it is ready to be processed after all the strings are read and
//processed
void StorageDatabase::readIndividualFileFromDatabase(ifstream &readFile, string myText){
	
	_individualReadFile.clear();
	_stringToRead.clear();
	while(readFile.peek()!=EOF){
		for(int i = START; i < NO_OF_ATTRIBUTES; i++){
			getline(readFile,myText);
			_individualReadFile.push_back(myText);
		}

		getline(readFile,myText);
		_stringToRead.push_back(_individualReadFile);
		//clear to be ready for the next vector<string>
		_individualReadFile.clear();
	}
	return;
}


	// End of segment: ./\StorageDatabase.cpp





	/**
	 * origin: ./\StorageDatabase.h
	 */

//****************************************************************************
//StorageDatabase is the class responsible for reading and writing of file
//to Database. Files will be saved as .txt file format in local database 
//such that the user can directly edit the .txt file even before openning the
//programme. 

//StorageDatabase comprises of 2 main functions which are
//1)read from database 
//2)write to database 

//StorageDatabase also writes a copy of the schedule to a backup database
//in the event that the user accidentally deleted the database or corrupted
//the file that deem it unreadable. The user would however, be refrained from
//editting the backup copy.

//sample usage:
//storageDatabaseObj.writeToDatabase();
//vector<vector<string>> databaseString = StorageDatabaseObj.readFromDatabase();
//****************************************************************************


#include <vector>
#include <string>
#include <assert.h>

#pragma once
using namespace std; 

const string INITIAL_VALUE_FILE_NAME = "Database.txt";
const string INITIAL_VALUE_BACK_UP_FILE_NAME ="BackupDatabase.bak";
const int START=0;
const int NO_OF_ATTRIBUTES = 6;

class StorageDatabase{
	private:
		string _fileName;
		string _backUpFileName;
		vector<vector<string>> _stringToRead; 
		vector<string> _individualReadFile;
	
	public:
		StorageDatabase();
		
		//primary functions
		vector<vector<string>> readFromDatabase();
		vector<vector<string>> readFromBackUpDatabase();
		void writeToDatabase(vector<vector<string>> taskStringVectorToWrite);
		
		//secondary supporting functions
		void setFileName(string nameToSet); 
		string getFileName(); 
		void writeIndivdualFileToDatabase(vector<vector<string>>::iterator fileIterator, 
										  ofstream& writeFile, 
										  vector<vector<string>> taskStringToWrite);
		void readIndividualFileFromDatabase(ifstream& readFile, string myText);
		
};




	// End of segment: ./\StorageDatabase.h





	/**
	 * origin: ./\StorageExecutor.cpp
	 */

#include "StorageExecutor.h"

using namespace std; 

StorageExecutor::StorageExecutor(void){
	_logFileName == LOG_FILE_NAME; 
}

//loadFromStorage reads file, converts string into task
//packs tasks into a State and return as a state
State StorageExecutor::loadFromStorage(){

	readFileAndConvertString();
	vector<Task>::iterator taskIterator = _convertedTaskVector.begin();
	_stateToLoad = processTaskAddition(taskIterator);
	
	return _stateToLoad;
}

//saveToStorage first gets all tasks from state
//convert tasks to vector<string>
//write the string to database 
void StorageExecutor::saveToStorage(State stateToSave){
	
	//ensures that State does not return a NULL pointer
	assert(&stateToSave!=NULL);
	_taskToStore = stateToSave.getAllTasks(); 

	vector<Task>::iterator myTaskIterator = _taskToStore.begin();
	convertAllTaskToString(myTaskIterator);
	_storageDatabaseObj.writeToDatabase(_convertedStringStorage);
	
	return;
}

//adds converted Tasks into a State 
//returns the State after all Tasks are added
State StorageExecutor::processTaskAddition(vector<Task>::iterator taskIterator){

	while(taskIterator!= _convertedTaskVector.end()){
		_stateToLoad.addTask(*taskIterator); 
		taskIterator++; 
	}
	return _stateToLoad;
}

//read from database
//convert each string into task using storageConverter
//if any exceptions were caught during the conversion process
//errors could be from any of the sub-conversion functions
//conversions have failed and State will be loaded from backup 
//file
void StorageExecutor::readFileAndConvertString(){
	try{
		_storageToConvert = _storageDatabaseObj.readFromDatabase();
		vector<vector<string>>::iterator myStorageIterator = _storageToConvert.begin();
		processVectorStringToTaskConversion(myStorageIterator);
	} catch(exception&){
		compileErrorMessage(STORAGE_FUNCTION_LOAD_FROM_STORAGE,STORAGE_MSG_DATABASE_ERROR);
		logErrorMessage(_logErrorMessage);
		_storageToConvert.clear();

		logErrorMessage(STORAGE_MSG_LOAD_FROM_BACKUP); 
		_storageToConvert = _storageDatabaseObj.readFromBackUpDatabase();
		vector<vector<string>>::iterator myStorageIterator = _storageToConvert.begin();
		processVectorStringToTaskConversion(myStorageIterator);
	}
}

//conversion from vector<string> to Task
//exception handling when conversion isn't successful
void StorageExecutor::processVectorStringToTaskConversion(vector<vector<string>>::
	iterator vIterator){
	//convert string to task
	try{
		while(vIterator!=_storageToConvert.end()){
			_individualTask = _storageConverterObj.convertStringToTask(*vIterator);
			_convertedTaskVector.push_back(_individualTask);
			vIterator++;
		}
		return;
	} catch(exception&){
		compileErrorMessage(STORAGE_FUNCTION_VECTOR_STRING_TO_TASK_CONVERSION, 
							STORAGE_MSG_CONVERSION_ERROR);
		logErrorMessage(_logErrorMessage); 
		throw;
	}
}

//converts Tasks to strings
//store the converted string into a vector of strings
void StorageExecutor::convertAllTaskToString(vector<Task>::iterator taskIterator){

	_convertedStringStorage.clear();
	while(taskIterator!=_taskToStore.end()){
		_individualConvertedTask = _storageConverterObj.
			convertTaskToString(*taskIterator);	
		_convertedStringStorage.push_back(_individualConvertedTask);
		taskIterator++;
	}
	return;
}

//error messages will be compiled to a standard template before 
//it is to be written to file
void StorageExecutor::compileErrorMessage(string errorMessageLocation, 
										  string errorMessage){
	
	sprintf_s(_logErrorMessage, STORAGE_LOGGING_TEMPLATE.c_str(), 
			  errorMessageLocation.c_str(), errorMessage.c_str());

	return;
}

//logging function to write error message to file
void StorageExecutor::logErrorMessage(string errorMessage){
	if(LOGGING_MODE_ON == true){
		ofstream writeToLogFile;
		string currentTime = to_simple_string(second_clock::local_time());
		writeToLogFile.open(LOG_FILE_NAME, ios::app);
		writeToLogFile << currentTime << endl << errorMessage << endl;
		writeToLogFile.close();
	} 

	return;
}


	// End of segment: ./\StorageExecutor.cpp





	/**
	 * origin: ./\StorageExecutor.h
	 */

//****************************************************************************
//StorageExecutor is the class that depends on both StorageConverter as well 
//as StorageDatabase in order to execute its functions. 
//StorageExecutor acts as the Central Nerves System for the storage component
//what it does is handling and managing the different Tasks. Its two main 
//functions are 

//1) Saving a current State to storage
//2) Loading a saved .txt file and return a State

//Errors will also be logged if any of the component is not working as supposed

//sample usage:
//State stateToLoad = storageExecutorObj.loadFromStorage();
//storageExecutorObj.saveToStorage(); 
//****************************************************************************

#pragma once

#include "State.h"
#include "StorageConverter.h"
#include "StorageDatabase.h"
#include <string>
#include <vector>

using namespace std;

//error locations
const string STORAGE_FUNCTION_VECTOR_STRING_TO_TASK_CONVERSION = 
	"processVectorStringToTaskConversion(vector<vector<string>>::"
	"iterator vIterator)";
const string STORAGE_FUNCTION_LOAD_FROM_STORAGE = 
	"loadFromStorage();";
const string STORATE_FUNCTION_LOAD_FROM_BACKUP = 
	"raedFromBackUpDatabase();";

//error message
const string STORAGE_MSG_CONVERSION_ERROR = 
	"Conversion was unsuccessful!\n";
const string STORAGE_MSG_DATABASE_ERROR = 
	"Database file corrupted, reading from backup!\n";
const string STORAGE_MSG_BACKUP_ERROR = 
	"Backup file corrupted, creating a new copy!\n";
const string STORAGE_MSG_LOAD_FROM_BACKUP = 
	"Loading from Backup database...";


class StorageExecutor{
	private:
		string _logFileName; 
		char _logErrorMessage[MAX_SIZE]; 

		//obj requirements.
		StorageDatabase _storageDatabaseObj;
		StorageConverter _storageConverterObj; 

		State _stateToLoad; 
		Task _individualTask; 

		vector<vector<string>> _storageToConvert; 
		vector<vector<string>> _convertedStringStorage; 
		vector<string> _individualConvertedTask;
		vector<Task> _convertedTaskVector;
		vector<Task> _taskToStore;
	public:
		StorageExecutor(void);
		
		//primary functions
		State loadFromStorage();
		void saveToStorage(State stateToSave);
		
		//supporting functions
		State processTaskAddition(vector<Task>::iterator taskIterator);
		void readFileAndConvertString();
		void processVectorStringToTaskConversion(vector<vector<string>>::iterator vectorStringIterator);
		void convertAllTaskToString(vector<Task>::iterator taskIterator);
		
		//logging functions
		void logErrorMessage(string errorMessage);
		void compileErrorMessage(string errorMessageLocation, string errorMessage);
};



	// End of segment: ./\StorageExecutor.h





	/**
	 * origin: ./\StorageUnitTest.cpp
	 */


#include "stdafx.h"
#include "CppUnitTest.h"
#include "Task.cpp"
#include "StorageConverter.cpp"
#include "StorageDatabase.cpp"
#include "State.cpp"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace boost::posix_time;

namespace TestLibrary
{		
	TEST_CLASS(StorageConverterClassTest){
		private:
			string expectedString; 
			string testString; 
			vector<string> taskTags;
			Task taskObj;
			StorageConverter converterObj;
			
		public:
			TEST_METHOD(ptimeConversionFunctionTest){
				//normal Datetime
				ptime taskStartTime(date(2002,Jan,10), time_duration(1,2,3));
				string expectedDatetime = "20020110T010203";
				string startTimeTest = converterObj.convertTaskPtimeToString(taskStartTime);
				Assert::AreEqual(startTimeTest, expectedDatetime);
			}
			
			TEST_METHOD(ptimeConversionBoundaryTest){
				//boundary test case
				ptime testDatetime(not_a_date_time);
				string testDatetime2 = converterObj.convertTaskPtimeToString(testDatetime);
				string expectedDatetime = "not-a-date-time";
				Assert::AreEqual(testDatetime2, expectedDatetime);
			}
			TEST_METHOD(boolConvertionFunctionTest){
				expectedString = "1";
				testString = converterObj.convertTaskBoolToString(true); 
				Assert::AreEqual(testString, expectedString);
				
				expectedString = "0";
				testString = converterObj.convertTaskBoolToString(false);
				Assert::AreEqual(testString, expectedString); 	
			}

			//boundary case where NULL is entered 
			TEST_METHOD(boolConvertionBoundaryTest){
				expectedString = "0"; 
				testString = converterObj.convertTaskBoolToString(NULL);
				Assert::AreEqual(testString, expectedString); 
			}
			
			TEST_METHOD(taskTagConversionFunctionTest){
				//test convertion of task Tags
				taskTags.push_back("#cs1010");
				taskTags.push_back("#cs2103");
				expectedString = "#cs1010 #cs2103 ";
				testString = converterObj.convertTaskTagVectorToString(taskTags);
				Assert::AreEqual(testString, expectedString);
				taskTags.clear();
			}

			//test the case taskTag string is editted
			//that is user editted "#tag" to "tag"
			TEST_METHOD(taskTagConversionBoundaryTest){

				taskTags.push_back("cs1010");
				taskTags.push_back("cs2103");
				string expectedString = "cs1010 cs2103 ";
				testString = converterObj.convertTaskTagVectorToString(taskTags);
				Assert::AreEqual(expectedString, testString);
				taskTags.clear();
				taskTags = converterObj.convertTaskTagStringToVector(expectedString);
				vector<string> expectedTags; 
				expectedTags.push_back("#cs1010");
				expectedTags.push_back("#cs2103");
				Assert::AreEqual(expectedTags[0], taskTags[0]);
				Assert::AreEqual(expectedTags[1], taskTags[1]);
				taskTags.clear();
			}

			TEST_METHOD(convertStringToTaskIntegratedTest){
				vector<string> testInput;
				StorageConverter converterObj; 
				testInput.clear();

				testInput.push_back("Start Datetime: 20010101T010101");
				testInput.push_back("End Datetime: 20010102T010101");
				testInput.push_back("Task Deadline: 20010103T010101");
				testInput.push_back("Task Name: testName 2");
				testInput.push_back("Task Tags: #cs1010 #cs2103 ");
				testInput.push_back("Task isDone Status: 0");

				taskObj = converterObj.convertStringToTask(testInput);

				//checking if conversion is successful by validating individual attributes
				//startDatetime check
				ptime startDatetime = taskObj.getTaskStartTime();
				string startDatetimeString = converterObj.convertTaskPtimeToString(startDatetime);
				expectedString = "20010101T010101";
				Assert::AreEqual(expectedString, startDatetimeString);

				//endDatetime check
				ptime endDatetime = taskObj.getTaskEndTime();
				string endDatetimeString = converterObj.convertTaskPtimeToString(endDatetime);
				expectedString = "20010102T010101";
				Assert::AreEqual(expectedString, endDatetimeString);
				
				//deadLine check
				ptime deadLine = taskObj.getTaskDeadline();
				string deadLineString = converterObj.convertTaskPtimeToString(deadLine);
				expectedString = "20010103T010101";
				Assert::AreEqual(expectedString, deadLineString);
				
				//testName check
				string testName = taskObj.getTaskName();
				expectedString = "testName 2";
				Assert::AreEqual(expectedString, testName);

				//taskTags check
				vector<string> testTaskTags = taskObj.getTaskTags();
				string testTaskTagString = converterObj.convertTaskTagVectorToString(testTaskTags); 
				expectedString = "#cs1010 #cs2103 ";
				Assert::AreEqual(expectedString, testTaskTagString);

				//isDone check
				bool isDone = taskObj.getTaskIsDone();
				string isDoneString = converterObj.convertTaskBoolToString(isDone);
				expectedString = "0";
				Assert::AreEqual(expectedString, isDoneString);
			}
			
			TEST_METHOD(convertTaskToStringIntegratedTest){
				vector<string> testInput;
				testInput.clear();
				//contains all the boundary cases
				testInput.push_back("Start Datetime: not-a-date-time");
				testInput.push_back("End Datetime: 20010102T010101");
				testInput.push_back("Task Deadline: 20010102T010102");
				testInput.push_back("Task Name: testName 2");
				testInput.push_back("Task Tags: #cs1010 #cs2103 ");
				testInput.push_back("Task isDone Status: 1");

				Task taskObj2 = converterObj.convertStringToTask(testInput);
				ptime startDatetime = taskObj2.getTaskStartTime(); 
				string actualDatetime = converterObj.convertTaskPtimeToString(startDatetime);
				string expectedString = NOT_A_DATETIME; 
				Assert::AreEqual(actualDatetime, expectedString); 

				ptime endDatetime = taskObj2.getTaskEndTime();
				actualDatetime = converterObj.convertTaskPtimeToString(endDatetime); 
				expectedString = "20010102T010101"; 
				Assert::AreEqual(actualDatetime, expectedString);

				ptime deadLine = taskObj2.getTaskDeadline();
				actualDatetime = converterObj.convertTaskPtimeToString(deadLine);
				expectedString = "20010102T010102";
				Assert::AreEqual(actualDatetime, expectedString);

				vector<string> taskTags = taskObj2.getTaskTags(); 
				string actualTagString = converterObj.convertTaskTagVectorToString(taskTags);
				expectedString = "#cs1010 #cs2103 ";
				Assert::AreEqual(actualTagString, expectedString);

				string taskName = taskObj2.getTaskName(); 
				string actualName = converterObj.convertTaskNameToString(taskObj2);
				expectedString = "testName 2";
				Assert::AreEqual(actualName, expectedString); 

				bool isDoneStatus = taskObj2.getTaskIsDone(); 
				string actualIsDoneString = converterObj.convertTaskBoolToString(isDoneStatus);
				expectedString = "1";
				Assert::AreEqual(actualIsDoneString, expectedString); 
			}
	};

	TEST_CLASS(StorageDatabaseTest){
	private:
	public:

		TEST_METHOD(saveFileTest){
			
			vector<string> taskString; 
			StorageDatabase databaseObj; 
			databaseObj.setFileName("saveFileTest.txt");
			ofstream readFile2;
			readFile2.open("saveFileTest2.txt");
			readFile2 << "haha" << endl;
			vector<string> expectedString;
			expectedString.push_back("Start Datetime: 20010101T010101");
			expectedString.push_back("End Datetime: 20010102T010101");
			expectedString.push_back("Task Deadline: 20010103T010101");
			expectedString.push_back("Task Name: testName 2");
			expectedString.push_back("Task Tags: #cs1010 #cs2103 ");
			expectedString.push_back("Start Datetime: 20010101T010101");

			vector<vector<string>> actualContents;
			actualContents.push_back(expectedString);

			string myText; 
			int index;
			databaseObj.writeToDatabase(actualContents); 
			ifstream readFile("saveFileTest.txt"); 
			while(readFile.peek()!=EOF){
				for(index = START; index < NO_OF_ATTRIBUTES; index++){
					getline(readFile, myText);
				}
			}
			
		}

		TEST_METHOD(readFileTest){
			int index = 0; 

			string fileName = "testInput.txt"; 
			StorageDatabase databaseObj;
			databaseObj.setFileName(fileName); 
			vector<vector<string>> actualContents = databaseObj.readFromDatabase();
			vector<vector<string>> expectedContents;
			vector<string> taskString;
			taskString.push_back("Start Datetime: 20010101T010101");
			taskString.push_back("End Datetime: 20010102T010101");
			taskString.push_back("Task Deadline: 20010103T010101");
			taskString.push_back("Task Name: testName 2");
			taskString.push_back("Task Tags: #cs1010 #cs2103 ");
			taskString.push_back("Start Datetime: 20010101T010101");
			expectedContents.push_back(taskString);
			vector<vector<string>>::iterator vIte = actualContents.begin();
			vector<vector<string>>::iterator vIte2 = expectedContents.begin(); 
			while(vIte != actualContents.end() && vIte2!=expectedContents.end()){
				for(index = START, index < NO_OF_ATTRIBUTES; index++;){
					Assert::AreEqual((*vIte)[index], (*vIte2)[index]); 
				}
				vIte++;
				vIte2++;
			}
		}

	};
}
	// End of segment: ./\StorageUnitTest.cpp





